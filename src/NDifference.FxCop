<?xml version="1.0" encoding="utf-8"?>
<FxCopProject Version="1.36" Name="My FxCop Project">
 <ProjectOptions>
  <SharedProject>True</SharedProject>
  <Stylesheet Apply="False">c:\program files (x86)\microsoft fxcop 1.36\Xml\FxCopReport.xsl</Stylesheet>
  <SaveMessages>
   <Project Status="Active, Excluded" NewOnly="False" />
   <Report Status="Active" NewOnly="False" />
  </SaveMessages>
  <ProjectFile Compress="True" DefaultTargetCheck="True" DefaultRuleCheck="True" SaveByRuleGroup="" Deterministic="True" />
  <EnableMultithreadedLoad>True</EnableMultithreadedLoad>
  <EnableMultithreadedAnalysis>True</EnableMultithreadedAnalysis>
  <SourceLookup>True</SourceLookup>
  <AnalysisExceptionsThreshold>10</AnalysisExceptionsThreshold>
  <RuleExceptionsThreshold>1</RuleExceptionsThreshold>
  <Spelling Locale="en-US" />
  <OverrideRuleVisibilities>False</OverrideRuleVisibilities>
  <CustomDictionaries SearchFxCopDir="True" SearchUserProfile="True" SearchProjectDir="True" />
  <SearchGlobalAssemblyCache>False</SearchGlobalAssemblyCache>
  <DeadlockDetectionTimeout>120</DeadlockDetectionTimeout>
  <IgnoreGeneratedCode>False</IgnoreGeneratedCode>
 </ProjectOptions>
 <Targets>
  <Target Name="$(ProjectDir)/Core/bin/Debug/NDifference.Core.dll" Analyze="True" AnalyzeAllChildren="True" />
  <Target Name="$(ProjectDir)/Reflection/bin/Debug/NDifference.Reflection.dll" Analyze="True" AnalyzeAllChildren="True" />
 </Targets>
 <Rules>
  <RuleFiles>
   <RuleFile Name="$(FxCopDir)\Rules\DesignRules.dll" Enabled="True" AllRulesEnabled="False">
    <Rule Name="AbstractTypesShouldNotHaveConstructors" Enabled="True" />
    <Rule Name="AssembliesShouldHaveValidStrongNames" Enabled="True" />
    <Rule Name="AvoidEmptyInterfaces" Enabled="True" />
    <Rule Name="AvoidExcessiveParametersOnGenericTypes" Enabled="True" />
    <Rule Name="AvoidNamespacesWithFewTypes" Enabled="True" />
    <Rule Name="AvoidOutParameters" Enabled="True" />
    <Rule Name="CollectionsShouldImplementGenericInterface" Enabled="True" />
    <Rule Name="ConsiderPassingBaseTypesAsParameters" Enabled="True" />
    <Rule Name="DeclareEventHandlersCorrectly" Enabled="True" />
    <Rule Name="DeclareTypesInNamespaces" Enabled="True" />
    <Rule Name="DefaultParametersShouldNotBeUsed" Enabled="True" />
    <Rule Name="DefineAccessorsForAttributeArguments" Enabled="True" />
    <Rule Name="DoNotCatchGeneralExceptionTypes" Enabled="True" />
    <Rule Name="DoNotDeclareProtectedMembersInSealedTypes" Enabled="True" />
    <Rule Name="DoNotDeclareStaticMembersOnGenericTypes" Enabled="True" />
    <Rule Name="DoNotDeclareVirtualMembersInSealedTypes" Enabled="True" />
    <Rule Name="DoNotDeclareVisibleInstanceFields" Enabled="True" />
    <Rule Name="DoNotExposeGenericLists" Enabled="True" />
    <Rule Name="DoNotHideBaseClassMethods" Enabled="True" />
    <Rule Name="DoNotNestGenericTypesInMemberSignatures" Enabled="True" />
    <Rule Name="DoNotOverloadOperatorEqualsOnReferenceTypes" Enabled="True" />
    <Rule Name="DoNotPassTypesByReference" Enabled="True" />
    <Rule Name="DoNotRaiseExceptionsInUnexpectedLocations" Enabled="True" />
    <Rule Name="EnumeratorsShouldBeStronglyTyped" Enabled="True" />
    <Rule Name="EnumsShouldHaveZeroValue" Enabled="True" />
    <Rule Name="EnumStorageShouldBeInt32" Enabled="True" />
    <Rule Name="ExceptionsShouldBePublic" Enabled="True" />
    <Rule Name="GenericMethodsShouldProvideTypeParameter" Enabled="True" />
    <Rule Name="ICollectionImplementationsHaveStronglyTypedMembers" Enabled="True" />
    <Rule Name="ImplementIDisposableCorrectly" Enabled="True" />
    <Rule Name="ImplementStandardExceptionConstructors" Enabled="True" />
    <Rule Name="IndexersShouldNotBeMultidimensional" Enabled="True" />
    <Rule Name="InterfaceMethodsShouldBeCallableByChildTypes" Enabled="True" />
    <Rule Name="ListsAreStronglyTyped" Enabled="True" />
    <Rule Name="MarkAssembliesWithAssemblyVersion" Enabled="True" />
    <Rule Name="MarkAssembliesWithComVisible" Enabled="True" />
    <Rule Name="MarkAttributesWithAttributeUsage" Enabled="True" />
    <Rule Name="MarkEnumsWithFlags" Enabled="True" />
    <Rule Name="MembersShouldNotExposeCertainConcreteTypes" Enabled="True" />
    <Rule Name="MovePInvokesToNativeMethodsClass" Enabled="True" />
    <Rule Name="NestedTypesShouldNotBeVisible" Enabled="True" />
    <Rule Name="OverloadOperatorEqualsOnOverloadingAddAndSubtract" Enabled="True" />
    <Rule Name="OverrideMethodsOnComparableTypes" Enabled="True" />
    <Rule Name="PropertiesShouldNotBeWriteOnly" Enabled="True" />
    <Rule Name="ProvideObsoleteAttributeMessage" Enabled="True" />
    <Rule Name="ReplaceRepetitiveArgumentsWithParamsArray" Enabled="True" />
    <Rule Name="StaticHolderTypesShouldBeSealed" Enabled="True" />
    <Rule Name="StaticHolderTypesShouldNotHaveConstructors" Enabled="True" />
    <Rule Name="StringUriOverloadsCallSystemUriOverloads" Enabled="True" />
    <Rule Name="TypesShouldNotExtendCertainBaseTypes" Enabled="True" />
    <Rule Name="TypesThatOwnDisposableFieldsShouldBeDisposable" Enabled="True" />
    <Rule Name="TypesThatOwnNativeResourcesShouldBeDisposable" Enabled="True" />
    <Rule Name="UriParametersShouldNotBeStrings" Enabled="True" />
    <Rule Name="UriPropertiesShouldNotBeStrings" Enabled="True" />
    <Rule Name="UriReturnValuesShouldNotBeStrings" Enabled="True" />
    <Rule Name="UseEventsWhereAppropriate" Enabled="True" />
    <Rule Name="UseGenericEventHandlerInstances" Enabled="True" />
    <Rule Name="UseGenericsWhereAppropriate" Enabled="True" />
    <Rule Name="UseIntegralOrStringArgumentForIndexers" Enabled="True" />
    <Rule Name="UsePropertiesWhereAppropriate" Enabled="True" />
   </RuleFile>
   <RuleFile Name="$(FxCopDir)\Rules\GlobalizationRules.dll" Enabled="True" AllRulesEnabled="True" />
   <RuleFile Name="$(FxCopDir)\Rules\InteroperabilityRules.dll" Enabled="True" AllRulesEnabled="True" />
   <RuleFile Name="$(FxCopDir)\Rules\MobilityRules.dll" Enabled="True" AllRulesEnabled="True" />
   <RuleFile Name="$(FxCopDir)\Rules\NamingRules.dll" Enabled="True" AllRulesEnabled="True" />
   <RuleFile Name="$(FxCopDir)\Rules\PerformanceRules.dll" Enabled="True" AllRulesEnabled="True" />
   <RuleFile Name="$(FxCopDir)\Rules\PortabilityRules.dll" Enabled="True" AllRulesEnabled="True" />
   <RuleFile Name="$(FxCopDir)\Rules\SecurityRules.dll" Enabled="True" AllRulesEnabled="True" />
   <RuleFile Name="$(FxCopDir)\Rules\UsageRules.dll" Enabled="True" AllRulesEnabled="True" />
  </RuleFiles>
  <Groups />
  <Settings />
 </Rules>
 <FxCopReport Version="1.36">
  <Namespaces>
   <Namespace Name="NDifference.Plugins">
    <Messages>
     <Message TypeName="AvoidNamespacesWithFewTypes" Category="Microsoft.Design" CheckId="CA1020" Created="2014-04-30 15:24:07Z">
      <Issue>
       <Item>NDifference.Plugins</Item>
      </Issue>
     </Message>
     <Message Id="Plugins" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2014-04-30 15:24:07Z">
      <Issue Name="Namespace">
       <Item>Plugins</Item>
       <Item>NDifference.Plugins</Item>
      </Issue>
     </Message>
    </Messages>
   </Namespace>
  </Namespaces>
  <Targets>
   <Target Name="$(ProjectDir)/Core/bin/Debug/NDifference.Core.dll">
    <Modules>
     <Module Name="ndifference.core.dll">
      <Messages>
       <Message TypeName="AssembliesShouldHaveValidStrongNames" Category="Microsoft.Design" CheckId="CA2210" Created="2014-04-30 15:24:07Z">
        <Issue Name="NoStrongName">
         <Item>'NDifference.Core.dll'</Item>
        </Issue>
       </Message>
       <Message TypeName="MarkAssembliesWithClsCompliant" Category="Microsoft.Design" CheckId="CA1014" Created="2014-04-30 15:24:07Z">
        <Issue>
         <Item>'NDifference.Core.dll'</Item>
        </Issue>
       </Message>
      </Messages>
      <Namespaces>
       <Namespace Name="NDifference">
        <Types>
         <Type Name="FieldDeclaration">
          <Members>
           <Member Name="#Type">
            <Messages>
             <Message TypeName="PropertyNamesShouldNotMatchGetMethods" Category="Microsoft.Naming" CheckId="CA1721" Created="2014-04-30 15:24:07Z" FixCategory="NonBreaking">
              <Issue Name="BaseType">
               <Item>'FieldDeclaration.Type'</Item>
               <Item>'object.GetType()'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="FullyQualifiedName">
          <Messages>
           <Message TypeName="OverrideMethodsOnComparableTypes" Category="Microsoft.Design" CheckId="CA1036" Created="2014-04-30 15:24:07Z">
            <Issue Name="Operator">
             <Item>'FullyQualifiedName'</Item>
             <Item>&lt;</Item>
            </Issue>
            <Issue Name="Operator">
             <Item>'FullyQualifiedName'</Item>
             <Item>&gt;</Item>
            </Issue>
           </Message>
          </Messages>
          <Members>
           <Member Name="#.ctor(System.String)">
            <Messages>
             <Message Id="fqn" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2014-04-30 15:24:07Z">
              <Issue Name="MemberParameter">
               <Item>'FullyQualifiedName.FullyQualifiedName(string)'</Item>
               <Item>fqn</Item>
               <Item>'fqn'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#CompareTo(NDifference.FullyQualifiedName)">
            <Messages>
             <Message Id="System.String.CompareTo(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Created="2014-04-30 15:24:07Z">
              <Issue>
               <Item>'FullyQualifiedName.CompareTo(FullyQualifiedName)'</Item>
               <Item>'string.CompareTo(string)'</Item>
               <Item>'string.Compare(string, string, StringComparison)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#Equals(System.Object)">
            <Messages>
             <Message Id="System.String.Compare(System.String,System.String,System.Boolean)" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Created="2014-04-30 15:24:07Z">
              <Issue>
               <Item>'string.Compare(string, string, bool)'</Item>
               <Item>'FullyQualifiedName.Equals(object)'</Item>
               <Item>'string.Compare(string, string, bool, CultureInfo)'</Item>
              </Issue>
             </Message>
             <Message Id="System.String.Compare(System.String,System.String,System.Boolean)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Created="2014-04-30 15:24:07Z">
              <Issue>
               <Item>'FullyQualifiedName.Equals(object)'</Item>
               <Item>'string.Compare(string, string, bool)'</Item>
               <Item>'string.Compare(string, string, StringComparison)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#op_Equality(NDifference.FullyQualifiedName,NDifference.FullyQualifiedName)">
            <Messages>
             <Message Id="a" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2014-04-30 15:24:07Z">
              <Issue Name="MemberParameterMoreMeaningfulName">
               <Item>'FullyQualifiedName.operator ==(FullyQualifiedName, FullyQualifiedName)'</Item>
               <Item>'a'</Item>
              </Issue>
             </Message>
             <Message Id="b" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2014-04-30 15:24:07Z">
              <Issue Name="MemberParameterMoreMeaningfulName">
               <Item>'FullyQualifiedName.operator ==(FullyQualifiedName, FullyQualifiedName)'</Item>
               <Item>'b'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#op_Inequality(NDifference.FullyQualifiedName,NDifference.FullyQualifiedName)">
            <Messages>
             <Message Id="a" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2014-04-30 15:24:07Z">
              <Issue Name="MemberParameterMoreMeaningfulName">
               <Item>'FullyQualifiedName.operator !=(FullyQualifiedName, FullyQualifiedName)'</Item>
               <Item>'a'</Item>
              </Issue>
             </Message>
             <Message Id="b" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2014-04-30 15:24:07Z">
              <Issue Name="MemberParameterMoreMeaningfulName">
               <Item>'FullyQualifiedName.operator !=(FullyQualifiedName, FullyQualifiedName)'</Item>
               <Item>'b'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#Type">
            <Messages>
             <Message TypeName="PropertyNamesShouldNotMatchGetMethods" Category="Microsoft.Naming" CheckId="CA1721" Created="2014-04-30 15:24:07Z" FixCategory="NonBreaking">
              <Issue Name="BaseType">
               <Item>'FullyQualifiedName.Type'</Item>
               <Item>'object.GetType()'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="IAddions`1">
          <Messages>
           <Message Id="Addions" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2014-04-30 15:24:07Z">
            <Issue Name="Type">
             <Item>Addions</Item>
             <Item>'IAddions&lt;T&gt;'</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="IAssemblyReflector">
          <Members>
           <Member Name="#GetTypes(NDifference.AssemblyReflectionOption)">
            <Messages>
             <Message Id="Option" TypeName="IdentifiersShouldNotMatchKeywords" Category="Microsoft.Naming" CheckId="CA1716" Created="2014-04-30 15:24:07Z">
              <Issue Name="MemberParameter">
               <Item>'IAssemblyReflector.GetTypes(AssemblyReflectionOption)'</Item>
               <Item>'option'</Item>
               <Item>Option</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="ITypeInfo">
          <Members>
           <Member Name="#Namespace">
            <Messages>
             <Message Id="Namespace" TypeName="IdentifiersShouldNotMatchKeywords" Category="Microsoft.Naming" CheckId="CA1716" Created="2014-04-30 15:24:07Z">
              <Issue Name="Member">
               <Item>'ITypeInfo.Namespace'</Item>
               <Item>Namespace</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="Namespace">
          <Messages>
           <Message Id="Namespace" TypeName="IdentifiersShouldNotMatchKeywords" Category="Microsoft.Naming" CheckId="CA1716" Created="2014-04-30 15:24:07Z">
            <Issue Name="Type">
             <Item>'Namespace'</Item>
             <Item>Namespace</Item>
            </Issue>
           </Message>
           <Message TypeName="OverrideMethodsOnComparableTypes" Category="Microsoft.Design" CheckId="CA1036" Created="2014-04-30 15:24:07Z">
            <Issue Name="Operator">
             <Item>'Namespace'</Item>
             <Item>&lt;</Item>
            </Issue>
            <Issue Name="Operator">
             <Item>'Namespace'</Item>
             <Item>&gt;</Item>
            </Issue>
           </Message>
          </Messages>
          <Members>
           <Member Name="#CompareTo(NDifference.Namespace)">
            <Messages>
             <Message Id="System.String.CompareTo(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Created="2014-04-30 15:24:07Z">
              <Issue>
               <Item>'Namespace.CompareTo(Namespace)'</Item>
               <Item>'string.CompareTo(string)'</Item>
               <Item>'string.Compare(string, string, StringComparison)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#op_Addition(NDifference.Namespace,NDifference.TypeName)">
            <Messages>
             <Message TypeName="OperatorOverloadsHaveNamedAlternates" Category="Microsoft.Usage" CheckId="CA2225" Created="2014-04-30 15:24:07Z">
              <Issue>
               <Item>Add</Item>
               <Item>'Namespace.operator +(Namespace, TypeName)'</Item>
              </Issue>
             </Message>
             <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Created="2014-04-30 15:24:07Z">
              <Issue>
               <Item>'string.Format(string, object, object)'</Item>
               <Item>'Namespace.operator +(Namespace, TypeName)'</Item>
               <Item>'string.Format(IFormatProvider, string, params object[])'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#op_Equality(NDifference.Namespace,NDifference.Namespace)">
            <Messages>
             <Message Id="a" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2014-04-30 15:24:07Z">
              <Issue Name="MemberParameterMoreMeaningfulName">
               <Item>'Namespace.operator ==(Namespace, Namespace)'</Item>
               <Item>'a'</Item>
              </Issue>
             </Message>
             <Message Id="b" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2014-04-30 15:24:07Z">
              <Issue Name="MemberParameterMoreMeaningfulName">
               <Item>'Namespace.operator ==(Namespace, Namespace)'</Item>
               <Item>'b'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#op_Inequality(NDifference.Namespace,NDifference.Namespace)">
            <Messages>
             <Message Id="a" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2014-04-30 15:24:07Z">
              <Issue Name="MemberParameterMoreMeaningfulName">
               <Item>'Namespace.operator !=(Namespace, Namespace)'</Item>
               <Item>'a'</Item>
              </Issue>
             </Message>
             <Message Id="b" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2014-04-30 15:24:07Z">
              <Issue Name="MemberParameterMoreMeaningfulName">
               <Item>'Namespace.operator !=(Namespace, Namespace)'</Item>
               <Item>'b'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="Obsolete">
          <Members>
           <Member Name="#NotObsolete">
            <Messages>
             <Message TypeName="DoNotDeclareReadOnlyMutableReferenceTypes" Category="Microsoft.Security" CheckId="CA2104" Created="2014-04-30 15:24:07Z">
              <Issue>
               <Item>'Obsolete.NotObsolete'</Item>
               <Item>'Obsolete'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="OpaqueAssemblyNameComparer">
          <Members>
           <Member Name="#Equals(NDifference.OpaqueAssembly,System.String)">
            <Messages>
             <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Created="2014-04-30 15:24:07Z">
              <Issue>
               <Item>'OpaqueAssemblyNameComparer.Equals(OpaqueAssembly, string)'</Item>
              </Issue>
             </Message>
             <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Created="2014-04-30 15:24:07Z" FixCategory="NonBreaking">
              <Issue>
               <Item>'OpaqueAssemblyNameComparer.Equals(OpaqueAssembly, string)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="PocoType">
          <Messages>
           <Message Id="Poco" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2014-04-30 15:24:07Z">
            <Issue Name="Type">
             <Item>Poco</Item>
             <Item>'PocoType'</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
         <Type Name="PropertyDeclaration">
          <Members>
           <Member Name="#Type">
            <Messages>
             <Message TypeName="PropertyNamesShouldNotMatchGetMethods" Category="Microsoft.Naming" CheckId="CA1721" Created="2014-04-30 15:24:07Z" FixCategory="NonBreaking">
              <Issue Name="BaseType">
               <Item>'PropertyDeclaration.Type'</Item>
               <Item>'object.GetType()'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="SignatureOverloadResolver">
          <Members>
           <Member Name="#FindBestMatch(NDifference.Signature,System.Collections.Generic.IEnumerable`1&lt;NDifference.Signature&gt;)">
            <Messages>
             <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Created="2014-04-30 15:24:07Z">
              <Issue Name="TooGeneric">
               <Item>'SignatureOverloadResolver.FindBestMatch(Signature, IEnumerable&lt;Signature&gt;)'</Item>
               <Item>'Exception'</Item>
              </Issue>
             </Message>
             <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Created="2014-04-30 15:24:07Z" FixCategory="DependsOnFix">
              <Issue>
               <Item>'SignatureOverloadResolver.FindBestMatch(Signature, IEnumerable&lt;Signature&gt;)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="TypeExtensions">
          <Members>
           <Member Name="#ToTaxonomy(System.Type)">
            <Messages>
             <Message Id="t" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2014-04-30 15:24:07Z">
              <Issue Name="MemberParameterMoreMeaningfulName">
               <Item>'TypeExtensions.ToTaxonomy(this Type)'</Item>
               <Item>'t'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="TypeName">
          <Messages>
           <Message TypeName="OverrideMethodsOnComparableTypes" Category="Microsoft.Design" CheckId="CA1036" Created="2014-04-30 15:24:07Z">
            <Issue Name="Operator">
             <Item>'TypeName'</Item>
             <Item>&lt;</Item>
            </Issue>
            <Issue Name="Operator">
             <Item>'TypeName'</Item>
             <Item>&gt;</Item>
            </Issue>
           </Message>
          </Messages>
          <Members>
           <Member Name="#CompareTo(NDifference.TypeName)">
            <Messages>
             <Message Id="System.String.CompareTo(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Created="2014-04-30 15:24:07Z">
              <Issue>
               <Item>'TypeName.CompareTo(TypeName)'</Item>
               <Item>'string.CompareTo(string)'</Item>
               <Item>'string.Compare(string, string, StringComparison)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#op_Equality(NDifference.TypeName,NDifference.TypeName)">
            <Messages>
             <Message Id="a" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2014-04-30 15:24:07Z">
              <Issue Name="MemberParameterMoreMeaningfulName">
               <Item>'TypeName.operator ==(TypeName, TypeName)'</Item>
               <Item>'a'</Item>
              </Issue>
             </Message>
             <Message Id="b" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2014-04-30 15:24:07Z">
              <Issue Name="MemberParameterMoreMeaningfulName">
               <Item>'TypeName.operator ==(TypeName, TypeName)'</Item>
               <Item>'b'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#op_Inequality(NDifference.TypeName,NDifference.TypeName)">
            <Messages>
             <Message Id="a" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2014-04-30 15:24:07Z">
              <Issue Name="MemberParameterMoreMeaningfulName">
               <Item>'TypeName.operator !=(TypeName, TypeName)'</Item>
               <Item>'a'</Item>
              </Issue>
             </Message>
             <Message Id="b" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Created="2014-04-30 15:24:07Z">
              <Issue Name="MemberParameterMoreMeaningfulName">
               <Item>'TypeName.operator !=(TypeName, TypeName)'</Item>
               <Item>'b'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
        </Types>
       </Namespace>
       <Namespace Name="NDifference.Plugins">
        <Types>
         <Type Name="FileSystemAssemblyFinder">
          <Members>
           <Member Name="#.ctor(System.String)">
            <Messages>
             <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Created="2014-04-30 15:24:07Z">
              <Issue>
               <Item>'FileSystemAssemblyFinder.FileSystemAssemblyFinder(string)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
           <Member Name="#Filter">
            <Accessors>
             <Accessor Name="#set_Filter(System.String)">
              <Messages>
               <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Created="2014-04-30 15:24:07Z">
                <Issue>
                 <Item>'FileSystemAssemblyFinder.Filter.set(string)'</Item>
                </Issue>
               </Message>
              </Messages>
             </Accessor>
            </Accessors>
           </Member>
           <Member Name="#Folder">
            <Accessors>
             <Accessor Name="#set_Folder(System.String)">
              <Messages>
               <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Created="2014-04-30 15:24:07Z">
                <Issue>
                 <Item>'FileSystemAssemblyFinder.Folder.set(string)'</Item>
                </Issue>
               </Message>
              </Messages>
             </Accessor>
            </Accessors>
           </Member>
          </Members>
         </Type>
         <Type Name="ObjectInstantiator`1">
          <Members>
           <Member Name="#CreateTypesImplementingInterface(NDifference.IAssemblyReflector)">
            <Messages>
             <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Created="2014-04-30 15:24:07Z" FixCategory="NonBreaking">
              <Issue>
               <Item>'ObjectInstantiator&lt;T&gt;.CreateTypesImplementingInterface(IAssemblyReflector)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
         <Type Name="PluginDiscoverer`1">
          <Messages>
           <Message TypeName="AvoidUninstantiatedInternalClasses" Category="Microsoft.Performance" CheckId="CA1812" Created="2014-04-30 15:24:07Z">
            <Issue>
             <Item>'PluginDiscoverer&lt;T&gt;'</Item>
            </Issue>
           </Message>
          </Messages>
         </Type>
        </Types>
       </Namespace>
      </Namespaces>
     </Module>
    </Modules>
   </Target>
   <Target Name="$(ProjectDir)/Reflection/bin/Debug/NDifference.Reflection.dll">
    <Modules>
     <Module Name="ndifference.reflection.dll">
      <Messages>
       <Message TypeName="AssembliesShouldHaveValidStrongNames" Category="Microsoft.Design" CheckId="CA2210" Created="2014-04-30 15:24:07Z">
        <Issue Name="NoStrongName">
         <Item>'NDifference.Reflection.dll'</Item>
        </Issue>
       </Message>
       <Message TypeName="MarkAssembliesWithClsCompliant" Category="Microsoft.Design" CheckId="CA1014" Created="2014-04-30 15:24:07Z">
        <Issue>
         <Item>'NDifference.Reflection.dll'</Item>
        </Issue>
       </Message>
      </Messages>
      <Namespaces>
       <Namespace Name="NDifference.Reflection">
        <Types>
         <Type Name="CecilExtensionMethods">
          <Members>
           <Member Name="#IsInternalName(Mono.Cecil.TypeDefinition)">
            <Messages>
             <Message Id="System.String.StartsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Created="2014-04-30 15:24:07Z">
              <Issue>
               <Item>'CecilExtensionMethods.IsInternalName(this TypeDefinition)'</Item>
               <Item>'string.StartsWith(string)'</Item>
               <Item>'string.StartsWith(string, StringComparison)'</Item>
              </Issue>
              <Issue>
               <Item>'CecilExtensionMethods.IsInternalName(this TypeDefinition)'</Item>
               <Item>'string.StartsWith(string)'</Item>
               <Item>'string.StartsWith(string, StringComparison)'</Item>
              </Issue>
             </Message>
            </Messages>
           </Member>
          </Members>
         </Type>
        </Types>
       </Namespace>
      </Namespaces>
     </Module>
    </Modules>
   </Target>
  </Targets>
  <Rules>
   <Rule TypeName="AssembliesShouldHaveValidStrongNames" Category="Microsoft.Design" CheckId="CA2210">
    <Resolution Name="NoStrongName">Sign {0} with a strong name key.</Resolution>
   </Rule>
   <Rule TypeName="AvoidNamespacesWithFewTypes" Category="Microsoft.Design" CheckId="CA1020">
    <Resolution Name="Default">Consider merging the types defined in '{0}' with another namespace.</Resolution>
   </Rule>
   <Rule TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811">
    <Resolution Name="Default">{0} appears to have no upstream public or protected callers.</Resolution>
   </Rule>
   <Rule TypeName="AvoidUninstantiatedInternalClasses" Category="Microsoft.Performance" CheckId="CA1812">
    <Resolution Name="Default">{0} is an internal class that is apparently never instantiated. If so, remove the code from the assembly. If this class is intended to contain only static methods, consider adding a private constructor to prevent the compiler from generating a default constructor.</Resolution>
   </Rule>
   <Rule TypeName="DoNotDeclareReadOnlyMutableReferenceTypes" Category="Microsoft.Security" CheckId="CA2104">
    <Resolution Name="Default">Remove the read-only designation from {0} or change the field to one that is an immutable reference type. If the reference type {1} is, in fact, immutable, exclude this message.</Resolution>
   </Rule>
   <Rule TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201">
    <Resolution Name="TooGeneric">{0} creates an exception of type {1}, an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Resolution>
   </Rule>
   <Rule TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704">
    <Resolution Name="MemberParameter">In method {0}, correct the spelling of '{1}' in parameter name {2} or remove it entirely if it represents any sort of Hungarian notation.</Resolution>
    <Resolution Name="MemberParameterMoreMeaningfulName">In method {0}, consider providing a more meaningful name than parameter name {1}.</Resolution>
    <Resolution Name="Namespace">Correct the spelling of '{0}' in namespace name '{1}'.</Resolution>
    <Resolution Name="Type">Correct the spelling of '{0}' in type name {1}.</Resolution>
   </Rule>
   <Rule TypeName="IdentifiersShouldNotMatchKeywords" Category="Microsoft.Naming" CheckId="CA1716">
    <Resolution Name="Member">Rename virtual/interface member {0} so that it no longer conflicts with the reserved language keyword '{1}'. Using a reserved keyword as the name of a virtual/interface member makes it harder for consumers in other languages to override/implement the member.</Resolution>
    <Resolution Name="MemberParameter">In virtual/interface member {0}, rename parameter {1} so that it no longer conflicts with the reserved language keyword '{2}'. Using a reserved keyword as the name of a parameter on a virtual/interface member makes it harder for consumers in other languages to override/implement the member.</Resolution>
    <Resolution Name="Type">Rename type {0} so that it no longer conflicts with the reserved language keyword '{1}'. Using a reserved keyword as the name of a type makes it harder for consumers in other languages to use the type.</Resolution>
   </Rule>
   <Rule TypeName="MarkAssembliesWithClsCompliant" Category="Microsoft.Design" CheckId="CA1014">
    <Resolution Name="Default">Mark {0} with CLSCompliant(true) because it exposes externally visible types.</Resolution>
   </Rule>
   <Rule TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822">
    <Resolution Name="Default">The 'this' parameter (or 'Me' in Visual Basic) of {0} is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Resolution>
   </Rule>
   <Rule TypeName="OperatorOverloadsHaveNamedAlternates" Category="Microsoft.Usage" CheckId="CA2225">
    <Resolution Name="Default">Provide a method named '{0}' as a friendly alternate for operator {1}.</Resolution>
   </Rule>
   <Rule TypeName="OverrideMethodsOnComparableTypes" Category="Microsoft.Design" CheckId="CA1036">
    <Resolution Name="Operator">{0} should define operator '{1}' since it implements IComparable.</Resolution>
   </Rule>
   <Rule TypeName="PropertyNamesShouldNotMatchGetMethods" Category="Microsoft.Naming" CheckId="CA1721">
    <Resolution Name="BaseType">The property name {0} is confusing given the existence of inherited method {1}. Rename or remove this property.</Resolution>
   </Rule>
   <Rule TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304">
    <Resolution Name="Default">Because the behavior of {0} could vary based on the current user's locale settings, replace this call in {1} with a call to {2}. If the result of {2} will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Resolution>
   </Rule>
   <Rule TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305">
    <Resolution Name="Default">Because the behavior of {0} could vary based on the current user's locale settings, replace this call in {1} with a call to {2}. If the result of {2} will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Resolution>
   </Rule>
   <Rule TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307">
    <Resolution Name="Default">{0} makes a call to {1} that does not explicitly provide a StringComparison. This should be replaced with a call to {2}.</Resolution>
   </Rule>
  </Rules>
 </FxCopReport>
</FxCopProject>
