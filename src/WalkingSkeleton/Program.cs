using NDifference;
using NDifference.Analysis;
using NDifference.Files;
using NDifference.Framework;
using NDifference.Inspectors;
using NDifference.Plugins;
using NDifference.Projects;
using NDifference.Reporting;
using System;
using System.IO;
using System.Linq;
using System.Reflection;

namespace WalkingSkeleton
{
	public class Program
	{
#if ASSEMBLY_LOAD_DEMO
		public static void Main(string[] args)
		{
			var factory = new CecilReflectorFactory();
			var reflector = factory.LoadAssembly(Assembly.GetAssembly(typeof(CecilReflector)).Location);

			foreach(var tn in reflector.GetTypes())
			{
				Console.WriteLine(tn);
			}

			reflector = factory.LoadAssembly(Assembly.GetExecutingAssembly().Location);

			foreach (var tn in reflector.GetTypes())
			{
				Console.WriteLine(tn);
			}

			reflector = factory.LoadAssembly(Assembly.GetAssembly(typeof(PocoType)).Location);

			foreach (var tn in reflector.GetTypes())
			{
				Console.WriteLine(tn);
			}

			IFileFinder finder = new FileFinder(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location), FileFilterConstants.AssemblyFilter);

			var coreAssembly = Assembly.GetAssembly(typeof(PocoType));
			var testAssembly = Assembly.GetAssembly(typeof(PocoTypeFacts));
			var reflAssembly = Assembly.GetAssembly(typeof(CecilReflector));
			var monoAssembly = Assembly.GetAssembly(typeof(DefaultAssemblyResolver));

			var aInspectors = new AssemblyInspectorPluginDiscoverer(finder);
			aInspectors.Ignore(Path.GetFileName(coreAssembly.Location));
			aInspectors.Ignore(Path.GetFileName(testAssembly.Location));
			aInspectors.Ignore(Path.GetFileName(reflAssembly.Location));
			aInspectors.Ignore(Path.GetFileName(monoAssembly.Location));

			aInspectors.Find();

			var tInspectors = new TypeInspectorPluginDiscoverer(finder);
			tInspectors.Ignore(Path.GetFileName(coreAssembly.Location));
			tInspectors.Ignore(Path.GetFileName(testAssembly.Location));
			tInspectors.Ignore(Path.GetFileName(reflAssembly.Location));
			tInspectors.Ignore(Path.GetFileName(monoAssembly.Location));

			tInspectors.Find();

			var reportingPlugins = new ReportingPluginDiscoverer(finder);
			reportingPlugins.Ignore(Path.GetFileName(coreAssembly.Location));
			reportingPlugins.Ignore(Path.GetFileName(testAssembly.Location));
			reportingPlugins.Ignore(Path.GetFileName(reflAssembly.Location));
			reportingPlugins.Ignore(Path.GetFileName(monoAssembly.Location));

			IReportingRepository rr = new ReportingRepository();

			rr.AddRange(reportingPlugins.Find());

			foreach (var fmt in rr.ReportFormats.SupportedFormats)
			{
				Console.WriteLine(fmt);
			}

			Console.ReadKey();
		}
#else

		static void Main(string[] args)
		{
			if (args.Length < 3)
			{
				Console.WriteLine("WalkingSkeleton <v1 folder> <v2 folder> <output>");
				return;
			}

			string firstFolder = args[0];
			string secondFolder = args[1];
			string outputPath = args[2];

			if (!Directory.Exists(firstFolder))
			{
				Console.WriteLine("Folder \'{0}\' does not exist", firstFolder);
				return;
			}

			if (!Directory.Exists(secondFolder))
			{
				Console.WriteLine("Folder \'{0}\' does not exist", secondFolder);
				return;
			}

			var previousVersion = new ProductIncrement() { Name = "v0.0.1" };

			previousVersion.AddRange(AssemblyDiskInfoBuilder.BuildFromFolder(firstFolder));

			var nextVersion = new ProductIncrement() { Name = "v0.0.2" };

			nextVersion.AddRange(AssemblyDiskInfoBuilder.BuildFromFolder(secondFolder));

			var project = ProjectBuilder.Default();

			project.Product.Name = "Walking Skeleton";
			project.Product.Add(previousVersion);
			project.Product.Add(nextVersion);

			IAssemblyCollectionInspector addedAssemblies = new AddedAssembliesInspector();
			IAssemblyCollectionInspector removedAssemblies = new RemovedAssembliesInspector();
			IAssemblyCollectionInspector changedAssemblies = new CommonAssembliesInspector();

			IdentifiedChangeCollection summaryChanges = new IdentifiedChangeCollection
			{
				Name = project.Product.Name,
				Heading = project.Settings.SummaryTitle
			};

			removedAssemblies.Inspect(project.Product.ComparedIncrements.First.Assemblies, project.Product.ComparedIncrements.Second.Assemblies, summaryChanges);
			changedAssemblies.Inspect(project.Product.ComparedIncrements.First.Assemblies, project.Product.ComparedIncrements.Second.Assemblies, summaryChanges);
			addedAssemblies.Inspect(project.Product.ComparedIncrements.First.Assemblies, project.Product.ComparedIncrements.Second.Assemblies, summaryChanges);

			string autoGenerationMessage = String.Format("<!-- Generated by {0} {1} {2} {3} -->",
				project.Settings.ApplicationName,
				project.Settings.ApplicationVersion,
				DateTime.Now.ToLongDateString(),
				DateTime.Now.ToLongTimeString());

			summaryChanges.MetaBlocks.Add(autoGenerationMessage);

			if (String.IsNullOrEmpty(project.Settings.HeadTag))
			{
				summaryChanges.MetaBlocks.Add("<!-- No custom head content defined -->");
			}
			else
			{
				summaryChanges.MetaBlocks.Add("<!-- Custom head content -->");
				summaryChanges.MetaBlocks.Add(project.Settings.HeadTag);
				summaryChanges.MetaBlocks.Add("<!-- End of custom head content -->");
			}

			const int MaxLineLength = 80;

			if (String.IsNullOrEmpty(project.Settings.StyleTag))
			{
				summaryChanges.MetaBlocks.Add("<!-- No custom style content defined -->");
			}
			else
			{
				summaryChanges.MetaBlocks.Add("<!-- Custom style content -->");
				summaryChanges.MetaBlocks.Add(project.Settings.StyleTag.SplitLongLines(MaxLineLength));
				summaryChanges.MetaBlocks.Add("<!-- End of custom style content -->");
			}

			summaryChanges.SummaryBlocks.Add("Name", project.Product.Name);

			string fromVersion = project.Product.ComparedIncrements.First.Name;
			string toVersion = project.Product.ComparedIncrements.Second.Name;

			summaryChanges.SummaryBlocks.Add("From", fromVersion);
			summaryChanges.SummaryBlocks.Add("To", toVersion);
			summaryChanges.SummaryBlocks.Add("% Churn", "Not calculated yet");

			if (String.IsNullOrEmpty(project.Settings.FooterText))
			{
				summaryChanges.FooterBlocks.Add("<!-- No footer block defined -->");
			}
			else
			{
				summaryChanges.FooterBlocks.Add("<!-- Footer block -->");
				summaryChanges.FooterBlocks.Add(project.Settings.FooterText.SplitLongLines(MaxLineLength));
				summaryChanges.FooterBlocks.Add("<!-- End of Footer block -->");
			}


			IFileFinder finder = new FileFinder(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location), FileFilterConstants.AssemblyFilter);

			var reportRepo = new ReportingRepository();
			var reportFinder = new ReportingPluginDiscoverer(finder);

			reportRepo.AddRange(reportFinder.Find());

			var writer = reportRepo.Find("html");

			if (writer != null)
			{
				IReportFormat format = writer.SupportedFormats.First();

				writer.Map = OutputFileMapBuilder.BuildFor(summaryChanges, project, format);

				IReportOutput output = new FileOutput(outputPath);
				output.Folder = project.Settings.OutputFolder;

				writer.Write(summaryChanges, output, format);

				//foreach (var dllChange in assemblyLevelChanges)
				//{
				//	IReportOutput dllOutput = new FileOutput(outputPath);
				//	output.Folder = project.Settings.OutputFolder;

				//	//writer.Write(dllChange, output, format);
				//}
			}
		}

#endif

	}

	/// <summary>
	/// Example template class to exercise extension methods.
	/// </summary>
	/// <typeparam name="T"></typeparam>
	public class TemplatedType<T>
	{
		private T exampleObject;

		public TemplatedType(T o)
		{
			this.exampleObject = o;
		}
	}
}
